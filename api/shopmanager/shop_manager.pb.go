// Code generated by protoc-gen-go. DO NOT EDIT.
// source: shop_manager.proto

package shopmanager

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

type Plan int32

const (
	Plan_ORGANIZER Plan = 0
	Plan_MEMBER    Plan = 1
	Plan_BENCH     Plan = 2
	Plan_DESK      Plan = 3
	Plan_COMBO     Plan = 4
)

var Plan_name = map[int32]string{
	0: "ORGANIZER",
	1: "MEMBER",
	2: "BENCH",
	3: "DESK",
	4: "COMBO",
}
var Plan_value = map[string]int32{
	"ORGANIZER": 0,
	"MEMBER":    1,
	"BENCH":     2,
	"DESK":      3,
	"COMBO":     4,
}

func (x Plan) String() string {
	return proto.EnumName(Plan_name, int32(x))
}
func (Plan) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_shop_manager_ae34acc3bc964a4e, []int{0}
}

type BadgeType int32

const (
	BadgeType_CARD     BadgeType = 0
	BadgeType_STICKER  BadgeType = 1
	BadgeType_RING     BadgeType = 2
	BadgeType_KEYCHAIN BadgeType = 3
)

var BadgeType_name = map[int32]string{
	0: "CARD",
	1: "STICKER",
	2: "RING",
	3: "KEYCHAIN",
}
var BadgeType_value = map[string]int32{
	"CARD":     0,
	"STICKER":  1,
	"RING":     2,
	"KEYCHAIN": 3,
}

func (x BadgeType) String() string {
	return proto.EnumName(BadgeType_name, int32(x))
}
func (BadgeType) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_shop_manager_ae34acc3bc964a4e, []int{1}
}

type User struct {
	Username             string   `protobuf:"bytes,1,opt,name=username,proto3" json:"username,omitempty"`
	First                string   `protobuf:"bytes,2,opt,name=first,proto3" json:"first,omitempty"`
	Last                 string   `protobuf:"bytes,3,opt,name=last,proto3" json:"last,omitempty"`
	Slack                string   `protobuf:"bytes,4,opt,name=slack,proto3" json:"slack,omitempty"`
	Plan                 Plan     `protobuf:"varint,5,opt,name=plan,proto3,enum=shopmanager.Plan" json:"plan,omitempty"`
	Badges               []*Badge `protobuf:"bytes,6,rep,name=badges,proto3" json:"badges,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *User) Reset()         { *m = User{} }
func (m *User) String() string { return proto.CompactTextString(m) }
func (*User) ProtoMessage()    {}
func (*User) Descriptor() ([]byte, []int) {
	return fileDescriptor_shop_manager_ae34acc3bc964a4e, []int{0}
}
func (m *User) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_User.Unmarshal(m, b)
}
func (m *User) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_User.Marshal(b, m, deterministic)
}
func (dst *User) XXX_Merge(src proto.Message) {
	xxx_messageInfo_User.Merge(dst, src)
}
func (m *User) XXX_Size() int {
	return xxx_messageInfo_User.Size(m)
}
func (m *User) XXX_DiscardUnknown() {
	xxx_messageInfo_User.DiscardUnknown(m)
}

var xxx_messageInfo_User proto.InternalMessageInfo

func (m *User) GetUsername() string {
	if m != nil {
		return m.Username
	}
	return ""
}

func (m *User) GetFirst() string {
	if m != nil {
		return m.First
	}
	return ""
}

func (m *User) GetLast() string {
	if m != nil {
		return m.Last
	}
	return ""
}

func (m *User) GetSlack() string {
	if m != nil {
		return m.Slack
	}
	return ""
}

func (m *User) GetPlan() Plan {
	if m != nil {
		return m.Plan
	}
	return Plan_ORGANIZER
}

func (m *User) GetBadges() []*Badge {
	if m != nil {
		return m.Badges
	}
	return nil
}

type Empty struct {
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Empty) Reset()         { *m = Empty{} }
func (m *Empty) String() string { return proto.CompactTextString(m) }
func (*Empty) ProtoMessage()    {}
func (*Empty) Descriptor() ([]byte, []int) {
	return fileDescriptor_shop_manager_ae34acc3bc964a4e, []int{1}
}
func (m *Empty) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Empty.Unmarshal(m, b)
}
func (m *Empty) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Empty.Marshal(b, m, deterministic)
}
func (dst *Empty) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Empty.Merge(dst, src)
}
func (m *Empty) XXX_Size() int {
	return xxx_messageInfo_Empty.Size(m)
}
func (m *Empty) XXX_DiscardUnknown() {
	xxx_messageInfo_Empty.DiscardUnknown(m)
}

var xxx_messageInfo_Empty proto.InternalMessageInfo

type Badge struct {
	Id                   string    `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	User                 *User     `protobuf:"bytes,2,opt,name=user,proto3" json:"user,omitempty"`
	Enabled              bool      `protobuf:"varint,3,opt,name=enabled,proto3" json:"enabled,omitempty"`
	Type                 BadgeType `protobuf:"varint,4,opt,name=type,proto3,enum=shopmanager.BadgeType" json:"type,omitempty"`
	XXX_NoUnkeyedLiteral struct{}  `json:"-"`
	XXX_unrecognized     []byte    `json:"-"`
	XXX_sizecache        int32     `json:"-"`
}

func (m *Badge) Reset()         { *m = Badge{} }
func (m *Badge) String() string { return proto.CompactTextString(m) }
func (*Badge) ProtoMessage()    {}
func (*Badge) Descriptor() ([]byte, []int) {
	return fileDescriptor_shop_manager_ae34acc3bc964a4e, []int{2}
}
func (m *Badge) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Badge.Unmarshal(m, b)
}
func (m *Badge) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Badge.Marshal(b, m, deterministic)
}
func (dst *Badge) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Badge.Merge(dst, src)
}
func (m *Badge) XXX_Size() int {
	return xxx_messageInfo_Badge.Size(m)
}
func (m *Badge) XXX_DiscardUnknown() {
	xxx_messageInfo_Badge.DiscardUnknown(m)
}

var xxx_messageInfo_Badge proto.InternalMessageInfo

func (m *Badge) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

func (m *Badge) GetUser() *User {
	if m != nil {
		return m.User
	}
	return nil
}

func (m *Badge) GetEnabled() bool {
	if m != nil {
		return m.Enabled
	}
	return false
}

func (m *Badge) GetType() BadgeType {
	if m != nil {
		return m.Type
	}
	return BadgeType_CARD
}

func init() {
	proto.RegisterType((*User)(nil), "shopmanager.User")
	proto.RegisterType((*Empty)(nil), "shopmanager.Empty")
	proto.RegisterType((*Badge)(nil), "shopmanager.Badge")
	proto.RegisterEnum("shopmanager.Plan", Plan_name, Plan_value)
	proto.RegisterEnum("shopmanager.BadgeType", BadgeType_name, BadgeType_value)
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// ShopManagerClient is the client API for ShopManager service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type ShopManagerClient interface {
	ListUsers(ctx context.Context, in *Empty, opts ...grpc.CallOption) (ShopManager_ListUsersClient, error)
}

type shopManagerClient struct {
	cc *grpc.ClientConn
}

func NewShopManagerClient(cc *grpc.ClientConn) ShopManagerClient {
	return &shopManagerClient{cc}
}

func (c *shopManagerClient) ListUsers(ctx context.Context, in *Empty, opts ...grpc.CallOption) (ShopManager_ListUsersClient, error) {
	stream, err := c.cc.NewStream(ctx, &_ShopManager_serviceDesc.Streams[0], "/shopmanager.ShopManager/ListUsers", opts...)
	if err != nil {
		return nil, err
	}
	x := &shopManagerListUsersClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type ShopManager_ListUsersClient interface {
	Recv() (*User, error)
	grpc.ClientStream
}

type shopManagerListUsersClient struct {
	grpc.ClientStream
}

func (x *shopManagerListUsersClient) Recv() (*User, error) {
	m := new(User)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// ShopManagerServer is the server API for ShopManager service.
type ShopManagerServer interface {
	ListUsers(*Empty, ShopManager_ListUsersServer) error
}

func RegisterShopManagerServer(s *grpc.Server, srv ShopManagerServer) {
	s.RegisterService(&_ShopManager_serviceDesc, srv)
}

func _ShopManager_ListUsers_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(Empty)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(ShopManagerServer).ListUsers(m, &shopManagerListUsersServer{stream})
}

type ShopManager_ListUsersServer interface {
	Send(*User) error
	grpc.ServerStream
}

type shopManagerListUsersServer struct {
	grpc.ServerStream
}

func (x *shopManagerListUsersServer) Send(m *User) error {
	return x.ServerStream.SendMsg(m)
}

var _ShopManager_serviceDesc = grpc.ServiceDesc{
	ServiceName: "shopmanager.ShopManager",
	HandlerType: (*ShopManagerServer)(nil),
	Methods:     []grpc.MethodDesc{},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "ListUsers",
			Handler:       _ShopManager_ListUsers_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "shop_manager.proto",
}

func init() { proto.RegisterFile("shop_manager.proto", fileDescriptor_shop_manager_ae34acc3bc964a4e) }

var fileDescriptor_shop_manager_ae34acc3bc964a4e = []byte{
	// 381 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x64, 0x52, 0xcf, 0x8b, 0xd3, 0x40,
	0x14, 0x6e, 0xd2, 0x49, 0x9b, 0xbc, 0x68, 0x19, 0x1f, 0x22, 0x61, 0x4f, 0x25, 0x20, 0x94, 0x1c,
	0x8a, 0x44, 0xf0, 0xe0, 0x2d, 0xc9, 0x0e, 0xbb, 0xa1, 0x26, 0x95, 0xe9, 0x7a, 0xd0, 0x8b, 0x4c,
	0xcd, 0xb8, 0x1b, 0x4c, 0x93, 0x90, 0x89, 0x87, 0xde, 0xfd, 0x97, 0xfc, 0xff, 0x64, 0xa6, 0x75,
	0x71, 0xed, 0x6d, 0xbe, 0x1f, 0xbc, 0xf7, 0x7d, 0x8f, 0x01, 0x54, 0x0f, 0x5d, 0xff, 0xf5, 0x20,
	0x5a, 0x71, 0x2f, 0x87, 0x75, 0x3f, 0x74, 0x63, 0x87, 0xbe, 0xe6, 0xce, 0x54, 0xf8, 0xdb, 0x02,
	0xf2, 0x49, 0xc9, 0x01, 0xaf, 0xc0, 0xfd, 0xa9, 0xe4, 0xd0, 0x8a, 0x83, 0x0c, 0xac, 0xa5, 0xb5,
	0xf2, 0xf8, 0x23, 0xc6, 0x97, 0xe0, 0x7c, 0xaf, 0x07, 0x35, 0x06, 0xb6, 0x11, 0x4e, 0x00, 0x11,
	0x48, 0x23, 0xd4, 0x18, 0x4c, 0x0d, 0x69, 0xde, 0xda, 0xa9, 0x1a, 0xf1, 0xed, 0x47, 0x40, 0x4e,
	0x4e, 0x03, 0xf0, 0x35, 0x90, 0xbe, 0x11, 0x6d, 0xe0, 0x2c, 0xad, 0xd5, 0x22, 0x7e, 0xb1, 0xfe,
	0x27, 0xc0, 0xfa, 0x63, 0x23, 0x5a, 0x6e, 0x64, 0x8c, 0x60, 0xb6, 0x17, 0xd5, 0xbd, 0x54, 0xc1,
	0x6c, 0x39, 0x5d, 0xf9, 0x31, 0x3e, 0x31, 0xa6, 0x5a, 0xe2, 0x67, 0x47, 0x38, 0x07, 0x87, 0x1d,
	0xfa, 0xf1, 0x18, 0xfe, 0xb2, 0xc0, 0x31, 0x12, 0x2e, 0xc0, 0xae, 0xab, 0x73, 0x76, 0xbb, 0xae,
	0xf4, 0x56, 0xdd, 0xc0, 0x84, 0xf6, 0xff, 0xdb, 0xaa, 0x2b, 0x73, 0x23, 0x63, 0x00, 0x73, 0xd9,
	0x8a, 0x7d, 0x23, 0x2b, 0xd3, 0xc4, 0xe5, 0x7f, 0x21, 0x46, 0x40, 0xc6, 0x63, 0x2f, 0x4d, 0x97,
	0x45, 0xfc, 0xea, 0x32, 0xcd, 0xdd, 0xb1, 0x97, 0xdc, 0x78, 0xa2, 0x04, 0x88, 0x6e, 0x82, 0xcf,
	0xc1, 0xdb, 0xf2, 0x9b, 0xa4, 0xcc, 0xbf, 0x30, 0x4e, 0x27, 0x08, 0x30, 0x2b, 0x58, 0x91, 0x32,
	0x4e, 0x2d, 0xf4, 0xc0, 0x49, 0x59, 0x99, 0xdd, 0x52, 0x1b, 0x5d, 0x20, 0xd7, 0x6c, 0xb7, 0xa1,
	0x53, 0x4d, 0x66, 0xdb, 0x22, 0xdd, 0x52, 0x12, 0xbd, 0x07, 0xef, 0x71, 0xaa, 0x76, 0x64, 0x09,
	0xbf, 0xa6, 0x13, 0xf4, 0x61, 0xbe, 0xbb, 0xcb, 0xb3, 0x8d, 0x99, 0xe1, 0x02, 0xe1, 0x79, 0x79,
	0x43, 0x6d, 0x7c, 0x06, 0xee, 0x86, 0x7d, 0xce, 0x6e, 0x93, 0xbc, 0xa4, 0xd3, 0x98, 0x81, 0xbf,
	0x7b, 0xe8, 0xfa, 0xe2, 0x94, 0x0e, 0xdf, 0x81, 0xf7, 0xa1, 0x56, 0xa3, 0x6e, 0xa9, 0xf0, 0xe9,
	0x19, 0xcd, 0xd5, 0xae, 0x2e, 0xaf, 0x11, 0x4e, 0xde, 0x58, 0xfb, 0x99, 0xf9, 0x21, 0x6f, 0xff,
	0x04, 0x00, 0x00, 0xff, 0xff, 0x74, 0x5a, 0x77, 0x2e, 0x37, 0x02, 0x00, 0x00,
}
